(define (problem move_it)
    (:domain NICE)
    (:objects 
        A B C D E F - city
    )
    (:init 
        (starting_city A)
        (is_in A)
        (is_adjacent A B)
        (is_adjacent A C)
        (is_adjacent A F)
        (is_adjacent B C)
        (is_adjacent B E)
        (is_adjacent B F)
        (is_adjacent B A)
        (is_adjacent C B)
        (is_adjacent C F)
        (is_adjacent C D)
        (is_adjacent D C)
        (is_adjacent D E)
        (is_adjacent E D)
        (is_adjacent E B)
        (is_adjacent E F)
        (is_adjacent F A)
        (is_adjacent F B)
        (is_adjacent F C)
        (is_adjacent F E)
        (is_adjacent C A)

        (= (total_cost) 0)
        (= (move_cost A B) 10)
        (= (move_cost A C) 16)
        (= (move_cost A F) 19)
        (= (move_cost B C) 13)
        (= (move_cost B E) 12)
        (= (move_cost B F) 8)
        (= (move_cost C F) 12)
        (= (move_cost C D) 17)
        (= (move_cost D E) 20)
        (= (move_cost E F) 15)
        (= (move_cost B A) 10)
        (= (move_cost C A) 16)
        (= (move_cost F A) 19)
        (= (move_cost C B) 13)
        (= (move_cost E B) 12)
        (= (move_cost F B) 8)
        (= (move_cost F C) 12)
        (= (move_cost D C) 17)
        (= (move_cost E D) 20)
        (= (move_cost F E) 15)
    )
    (:goal (and (was_in A)
                (was_in B)
                (was_in C)
                (was_in D)
                (was_in E)
                (was_in F)
                (is_in A)
                ))
    (:metric minimize (total_cost))
    )
    
    
    
